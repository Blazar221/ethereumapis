// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1alpha1/shard.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ShardBlock struct {
	ShardParentRoot      []byte   `protobuf:"bytes,1,opt,name=shard_parent_root,json=shardParentRoot,proto3" json:"shard_parent_root,omitempty" ssz-size:"32"`
	BeaconParentRoot     []byte   `protobuf:"bytes,2,opt,name=beacon_parent_root,json=beaconParentRoot,proto3" json:"beacon_parent_root,omitempty" ssz-size:"32"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	ProposerIndex        uint64   `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	Body                 [][]byte `protobuf:"bytes,5,rep,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardBlock) Reset()         { *m = ShardBlock{} }
func (m *ShardBlock) String() string { return proto.CompactTextString(m) }
func (*ShardBlock) ProtoMessage()    {}
func (*ShardBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{0}
}
func (m *ShardBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlock.Merge(m, src)
}
func (m *ShardBlock) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlock proto.InternalMessageInfo

func (m *ShardBlock) GetShardParentRoot() []byte {
	if m != nil {
		return m.ShardParentRoot
	}
	return nil
}

func (m *ShardBlock) GetBeaconParentRoot() []byte {
	if m != nil {
		return m.BeaconParentRoot
	}
	return nil
}

func (m *ShardBlock) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardBlock) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *ShardBlock) GetBody() [][]byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type SignedShardBlock struct {
	Message              *ShardBlock `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SignedShardBlock) Reset()         { *m = SignedShardBlock{} }
func (m *SignedShardBlock) String() string { return proto.CompactTextString(m) }
func (*SignedShardBlock) ProtoMessage()    {}
func (*SignedShardBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{1}
}
func (m *SignedShardBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedShardBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedShardBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedShardBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedShardBlock.Merge(m, src)
}
func (m *SignedShardBlock) XXX_Size() int {
	return m.Size()
}
func (m *SignedShardBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedShardBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SignedShardBlock proto.InternalMessageInfo

func (m *SignedShardBlock) GetMessage() *ShardBlock {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SignedShardBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ShardBlockHeader struct {
	ShardParentRoot      []byte   `protobuf:"bytes,1,opt,name=shard_parent_root,json=shardParentRoot,proto3" json:"shard_parent_root,omitempty" ssz-size:"32"`
	BeaconParentRoot     []byte   `protobuf:"bytes,2,opt,name=beacon_parent_root,json=beaconParentRoot,proto3" json:"beacon_parent_root,omitempty" ssz-size:"32"`
	Slot                 uint64   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	ProposerIndex        uint64   `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	BodyRoot             []byte   `protobuf:"bytes,5,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardBlockHeader) Reset()         { *m = ShardBlockHeader{} }
func (m *ShardBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ShardBlockHeader) ProtoMessage()    {}
func (*ShardBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{2}
}
func (m *ShardBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlockHeader.Merge(m, src)
}
func (m *ShardBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlockHeader proto.InternalMessageInfo

func (m *ShardBlockHeader) GetShardParentRoot() []byte {
	if m != nil {
		return m.ShardParentRoot
	}
	return nil
}

func (m *ShardBlockHeader) GetBeaconParentRoot() []byte {
	if m != nil {
		return m.BeaconParentRoot
	}
	return nil
}

func (m *ShardBlockHeader) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardBlockHeader) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *ShardBlockHeader) GetBodyRoot() []byte {
	if m != nil {
		return m.BodyRoot
	}
	return nil
}

type ShardState struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	GasPrice             uint64   `protobuf:"varint,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	TransitionDigest     []byte   `protobuf:"bytes,3,opt,name=transition_digest,json=transitionDigest,proto3" json:"transition_digest,omitempty" ssz-size:"32"`
	LatestBlockRoot      []byte   `protobuf:"bytes,4,opt,name=latest_block_root,json=latestBlockRoot,proto3" json:"latest_block_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardState) Reset()         { *m = ShardState{} }
func (m *ShardState) String() string { return proto.CompactTextString(m) }
func (*ShardState) ProtoMessage()    {}
func (*ShardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{3}
}
func (m *ShardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardState.Merge(m, src)
}
func (m *ShardState) XXX_Size() int {
	return m.Size()
}
func (m *ShardState) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardState.DiscardUnknown(m)
}

var xxx_messageInfo_ShardState proto.InternalMessageInfo

func (m *ShardState) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardState) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ShardState) GetTransitionDigest() []byte {
	if m != nil {
		return m.TransitionDigest
	}
	return nil
}

func (m *ShardState) GetLatestBlockRoot() []byte {
	if m != nil {
		return m.LatestBlockRoot
	}
	return nil
}

type ShardTransition struct {
	StartSlot                  uint64        `protobuf:"varint,1,opt,name=start_slot,json=startSlot,proto3" json:"start_slot,omitempty"`
	ShardBlockLengths          []uint64      `protobuf:"varint,2,rep,packed,name=shard_block_lengths,json=shardBlockLengths,proto3" json:"shard_block_lengths,omitempty" ssz-max:"2048"`
	ShardDataRoots             [][]byte      `protobuf:"bytes,3,rep,name=shard_data_roots,json=shardDataRoots,proto3" json:"shard_data_roots,omitempty" ssz-size:"32,2048"`
	ShardStates                []*ShardState `protobuf:"bytes,4,rep,name=shard_states,json=shardStates,proto3" json:"shard_states,omitempty" ssz-max:"2048"`
	ProposerSignatureAggregate []byte        `protobuf:"bytes,5,opt,name=proposer_signature_aggregate,json=proposerSignatureAggregate,proto3" json:"proposer_signature_aggregate,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral       struct{}      `json:"-"`
	XXX_unrecognized           []byte        `json:"-"`
	XXX_sizecache              int32         `json:"-"`
}

func (m *ShardTransition) Reset()         { *m = ShardTransition{} }
func (m *ShardTransition) String() string { return proto.CompactTextString(m) }
func (*ShardTransition) ProtoMessage()    {}
func (*ShardTransition) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d9da510e571288b, []int{4}
}
func (m *ShardTransition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardTransition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardTransition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardTransition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardTransition.Merge(m, src)
}
func (m *ShardTransition) XXX_Size() int {
	return m.Size()
}
func (m *ShardTransition) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardTransition.DiscardUnknown(m)
}

var xxx_messageInfo_ShardTransition proto.InternalMessageInfo

func (m *ShardTransition) GetStartSlot() uint64 {
	if m != nil {
		return m.StartSlot
	}
	return 0
}

func (m *ShardTransition) GetShardBlockLengths() []uint64 {
	if m != nil {
		return m.ShardBlockLengths
	}
	return nil
}

func (m *ShardTransition) GetShardDataRoots() [][]byte {
	if m != nil {
		return m.ShardDataRoots
	}
	return nil
}

func (m *ShardTransition) GetShardStates() []*ShardState {
	if m != nil {
		return m.ShardStates
	}
	return nil
}

func (m *ShardTransition) GetProposerSignatureAggregate() []byte {
	if m != nil {
		return m.ProposerSignatureAggregate
	}
	return nil
}

func init() {
	proto.RegisterType((*ShardBlock)(nil), "ethereum.eth.v1alpha1.ShardBlock")
	proto.RegisterType((*SignedShardBlock)(nil), "ethereum.eth.v1alpha1.SignedShardBlock")
	proto.RegisterType((*ShardBlockHeader)(nil), "ethereum.eth.v1alpha1.ShardBlockHeader")
	proto.RegisterType((*ShardState)(nil), "ethereum.eth.v1alpha1.ShardState")
	proto.RegisterType((*ShardTransition)(nil), "ethereum.eth.v1alpha1.ShardTransition")
}

func init() { proto.RegisterFile("eth/v1alpha1/shard.proto", fileDescriptor_5d9da510e571288b) }

var fileDescriptor_5d9da510e571288b = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0x27, 0xbb, 0xa9, 0x76, 0xa7, 0xff, 0x47, 0x2a, 0xa1, 0x6a, 0xbb, 0x06, 0x84, 0x3d, 0xd8,
	0xac, 0x6d, 0xa5, 0x68, 0x8b, 0xff, 0x96, 0x16, 0x14, 0x3c, 0x94, 0xac, 0x07, 0x11, 0x21, 0x4c,
	0x36, 0xe3, 0x24, 0x98, 0xcd, 0x84, 0x79, 0x6f, 0xa5, 0xed, 0xc9, 0xcf, 0xe3, 0x67, 0xf0, 0x03,
	0x78, 0xf4, 0x2e, 0x14, 0x29, 0xf8, 0x05, 0x7a, 0x17, 0x64, 0x66, 0x48, 0x1a, 0x61, 0x8b, 0x67,
	0x6f, 0x33, 0x93, 0xdf, 0xfb, 0xfd, 0x79, 0xf3, 0x32, 0xc4, 0xe3, 0x98, 0xf6, 0x3f, 0x6d, 0xb1,
	0xbc, 0x4c, 0xd9, 0x56, 0x1f, 0x52, 0xa6, 0x92, 0xa0, 0x54, 0x12, 0x25, 0x5d, 0xe5, 0x98, 0x72,
	0xc5, 0x27, 0xe3, 0x80, 0x63, 0x1a, 0x54, 0x90, 0xb5, 0x4d, 0x91, 0x61, 0x3a, 0x89, 0x83, 0x91,
	0x1c, 0xf7, 0x85, 0x14, 0xb2, 0x6f, 0xd0, 0xf1, 0xe4, 0x83, 0xd9, 0x99, 0x8d, 0x59, 0x59, 0x16,
	0xff, 0x87, 0x43, 0xc8, 0x50, 0xb3, 0x0e, 0x72, 0x39, 0xfa, 0x48, 0x9f, 0x90, 0x15, 0xa3, 0x11,
	0x95, 0x4c, 0xf1, 0x02, 0x23, 0x25, 0x25, 0x7a, 0x4e, 0xd7, 0xe9, 0xcd, 0x0f, 0x56, 0x2e, 0xce,
	0x36, 0x16, 0x00, 0x4e, 0x37, 0x21, 0x3b, 0xe5, 0x7b, 0xfe, 0xce, 0xb6, 0x1f, 0x2e, 0x19, 0xec,
	0x91, 0x81, 0x86, 0x52, 0x22, 0x7d, 0x46, 0x68, 0xcc, 0xd9, 0x48, 0x16, 0x7f, 0xd5, 0xb7, 0xae,
	0xaa, 0x5f, 0xb6, 0xe0, 0x06, 0x01, 0x25, 0x2e, 0xe4, 0x12, 0xbd, 0x76, 0xd7, 0xe9, 0xb9, 0xa1,
	0x59, 0xd3, 0x7b, 0x64, 0xb1, 0x54, 0xb2, 0x94, 0xc0, 0x55, 0x94, 0x15, 0x09, 0x3f, 0xf6, 0x5c,
	0xf3, 0x75, 0xa1, 0x3a, 0x7d, 0xa5, 0x0f, 0x75, 0x69, 0x2c, 0x93, 0x13, 0x6f, 0xa6, 0xdb, 0xee,
	0xcd, 0x87, 0x66, 0xed, 0x7f, 0x76, 0xc8, 0xf2, 0x30, 0x13, 0x05, 0x4f, 0x1a, 0x19, 0xf7, 0xc9,
	0xf5, 0x31, 0x07, 0x60, 0x82, 0x9b, 0x64, 0x73, 0xdb, 0x77, 0x83, 0xa9, 0xad, 0x0c, 0x2e, 0x6b,
	0xc2, 0xaa, 0x82, 0xf6, 0x49, 0x07, 0x32, 0x51, 0x30, 0x9c, 0x28, 0x3e, 0x3d, 0xd8, 0xe3, 0x5d,
	0x3f, 0xbc, 0xc4, 0xf8, 0xbf, 0xb5, 0x85, 0x9a, 0xe8, 0x25, 0x67, 0x09, 0x57, 0xff, 0x73, 0x9b,
	0x03, 0xd2, 0xd1, 0xad, 0xb5, 0x92, 0x33, 0x57, 0x49, 0xce, 0x6a, 0x8c, 0x96, 0xf2, 0xbf, 0x56,
	0x03, 0x36, 0x44, 0x86, 0xbc, 0x56, 0x76, 0x1a, 0xca, 0xb7, 0x48, 0x47, 0x30, 0x88, 0x4a, 0x95,
	0x8d, 0x6c, 0x4f, 0xdd, 0x70, 0x56, 0x30, 0x38, 0xd2, 0x7b, 0xfa, 0x94, 0xac, 0xa0, 0x62, 0x05,
	0x64, 0x98, 0xc9, 0x22, 0x4a, 0x32, 0xc1, 0xc1, 0xfa, 0x9e, 0x1e, 0xf5, 0x12, 0x7b, 0x60, 0xa0,
	0xba, 0xd5, 0x39, 0x43, 0x0e, 0x18, 0xc5, 0xfa, 0x02, 0xac, 0x6f, 0xf7, 0xca, 0x56, 0x5b, 0xac,
	0xbd, 0x74, 0x6d, 0xff, 0x57, 0x8b, 0x2c, 0x19, 0xfb, 0x6f, 0x6a, 0x62, 0x7a, 0x87, 0x10, 0x40,
	0xa6, 0x30, 0x6a, 0x24, 0xe9, 0x98, 0x93, 0xa1, 0x8e, 0x33, 0x20, 0x37, 0xec, 0xe5, 0x5a, 0xc1,
	0x9c, 0x17, 0x02, 0x53, 0xf0, 0x5a, 0xdd, 0x76, 0xcf, 0x1d, 0xd0, 0x8b, 0xb3, 0x8d, 0x45, 0xad,
	0x39, 0x66, 0xc7, 0x7b, 0xfe, 0xf6, 0x83, 0x87, 0x8f, 0xfc, 0xd0, 0xce, 0x82, 0xd1, 0x7c, 0x6d,
	0xc1, 0xf4, 0x39, 0x59, 0xb6, 0x1c, 0x09, 0x43, 0x66, 0x3c, 0x83, 0xd7, 0xd6, 0x83, 0x3d, 0xb8,
	0x79, 0x71, 0xb6, 0x41, 0x9b, 0xa6, 0xef, 0x5b, 0x92, 0x45, 0x83, 0x3f, 0x60, 0xc8, 0xb4, 0x6f,
	0xa0, 0x6f, 0xc9, 0xbc, 0x65, 0x00, 0xdd, 0x77, 0xf0, 0xdc, 0x6e, 0xfb, 0x5f, 0xa3, 0x6e, 0x6e,
	0x68, 0xaa, 0xc3, 0x39, 0xa8, 0xbf, 0x03, 0x1d, 0x92, 0xdb, 0xf5, 0xa0, 0xd4, 0x73, 0x1e, 0x31,
	0x21, 0x14, 0x17, 0x0c, 0xf9, 0xf4, 0xa1, 0xd0, 0x7f, 0xc5, 0x5a, 0x55, 0x36, 0xac, 0xaa, 0x5e,
	0x54, 0x45, 0x83, 0xf7, 0xdf, 0xce, 0xd7, 0x9d, 0xef, 0xe7, 0xeb, 0xce, 0xcf, 0xf3, 0x75, 0xe7,
	0xdd, 0x6e, 0xe3, 0x11, 0x2b, 0xd5, 0x09, 0x8c, 0x19, 0x66, 0xa3, 0x9c, 0xc5, 0xd0, 0xaf, 0xec,
	0xb3, 0x32, 0x33, 0x9b, 0xfa, 0x6d, 0xdc, 0xe7, 0x98, 0x7e, 0x69, 0xad, 0x1e, 0x56, 0xf1, 0x0e,
	0x1b, 0xf1, 0xe2, 0x6b, 0xe6, 0xb1, 0xdb, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x74, 0xd8,
	0x63, 0x4e, 0x05, 0x00, 0x00,
}

func (m *ShardBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShardParentRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.ShardParentRoot)))
		i += copy(dAtA[i:], m.ShardParentRoot)
	}
	if len(m.BeaconParentRoot) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.BeaconParentRoot)))
		i += copy(dAtA[i:], m.BeaconParentRoot)
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Slot))
	}
	if m.ProposerIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.ProposerIndex))
	}
	if len(m.Body) > 0 {
		for _, b := range m.Body {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintShard(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignedShardBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedShardBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShardParentRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.ShardParentRoot)))
		i += copy(dAtA[i:], m.ShardParentRoot)
	}
	if len(m.BeaconParentRoot) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.BeaconParentRoot)))
		i += copy(dAtA[i:], m.BeaconParentRoot)
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Slot))
	}
	if m.ProposerIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.ProposerIndex))
	}
	if len(m.BodyRoot) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.BodyRoot)))
		i += copy(dAtA[i:], m.BodyRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.Slot))
	}
	if m.GasPrice != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.GasPrice))
	}
	if len(m.TransitionDigest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.TransitionDigest)))
		i += copy(dAtA[i:], m.TransitionDigest)
	}
	if len(m.LatestBlockRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.LatestBlockRoot)))
		i += copy(dAtA[i:], m.LatestBlockRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardTransition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardTransition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartSlot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.StartSlot))
	}
	if len(m.ShardBlockLengths) > 0 {
		dAtA3 := make([]byte, len(m.ShardBlockLengths)*10)
		var j2 int
		for _, num := range m.ShardBlockLengths {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.ShardDataRoots) > 0 {
		for _, b := range m.ShardDataRoots {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintShard(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ShardStates) > 0 {
		for _, msg := range m.ShardStates {
			dAtA[i] = 0x22
			i++
			i = encodeVarintShard(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProposerSignatureAggregate) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.ProposerSignatureAggregate)))
		i += copy(dAtA[i:], m.ProposerSignatureAggregate)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintShard(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShardBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardParentRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.BeaconParentRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovShard(uint64(m.Slot))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovShard(uint64(m.ProposerIndex))
	}
	if len(m.Body) > 0 {
		for _, b := range m.Body {
			l = len(b)
			n += 1 + l + sovShard(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedShardBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardParentRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.BeaconParentRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovShard(uint64(m.Slot))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovShard(uint64(m.ProposerIndex))
	}
	l = len(m.BodyRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShard(uint64(m.Slot))
	}
	if m.GasPrice != 0 {
		n += 1 + sovShard(uint64(m.GasPrice))
	}
	l = len(m.TransitionDigest)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.LatestBlockRoot)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardTransition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartSlot != 0 {
		n += 1 + sovShard(uint64(m.StartSlot))
	}
	if len(m.ShardBlockLengths) > 0 {
		l = 0
		for _, e := range m.ShardBlockLengths {
			l += sovShard(uint64(e))
		}
		n += 1 + sovShard(uint64(l)) + l
	}
	if len(m.ShardDataRoots) > 0 {
		for _, b := range m.ShardDataRoots {
			l = len(b)
			n += 1 + l + sovShard(uint64(l))
		}
	}
	if len(m.ShardStates) > 0 {
		for _, e := range m.ShardStates {
			l = e.Size()
			n += 1 + l + sovShard(uint64(l))
		}
	}
	l = len(m.ProposerSignatureAggregate)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShard(x uint64) (n int) {
	return sovShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShardBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardParentRoot = append(m.ShardParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardParentRoot == nil {
				m.ShardParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconParentRoot = append(m.BeaconParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconParentRoot == nil {
				m.BeaconParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body, make([]byte, postIndex-iNdEx))
			copy(m.Body[len(m.Body)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedShardBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedShardBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedShardBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &ShardBlock{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardParentRoot = append(m.ShardParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardParentRoot == nil {
				m.ShardParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconParentRoot = append(m.BeaconParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconParentRoot == nil {
				m.BeaconParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyRoot = append(m.BodyRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyRoot == nil {
				m.BodyRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransitionDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransitionDigest = append(m.TransitionDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.TransitionDigest == nil {
				m.TransitionDigest = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockRoot = append(m.LatestBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockRoot == nil {
				m.LatestBlockRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardTransition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardTransition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardTransition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartSlot", wireType)
			}
			m.StartSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShardBlockLengths = append(m.ShardBlockLengths, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShard
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShard
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShard
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShardBlockLengths) == 0 {
					m.ShardBlockLengths = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShard
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShardBlockLengths = append(m.ShardBlockLengths, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBlockLengths", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardDataRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardDataRoots = append(m.ShardDataRoots, make([]byte, postIndex-iNdEx))
			copy(m.ShardDataRoots[len(m.ShardDataRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardStates = append(m.ShardStates, &ShardState{})
			if err := m.ShardStates[len(m.ShardStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerSignatureAggregate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerSignatureAggregate = append(m.ProposerSignatureAggregate[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposerSignatureAggregate == nil {
				m.ProposerSignatureAggregate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShard
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthShard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthShard
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShard   = fmt.Errorf("proto: integer overflow")
)
